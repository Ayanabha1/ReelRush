// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DB_URL")
}

model admin {
    user_id    String   @id
    first_name String
    last_name  String
    email      String   @unique
    created_at DateTime @default(now())
    updated_at DateTime @default(now())
}

model customer {
    user_id    String    @id
    first_name String
    last_name  String
    email      String    @unique
    created_at DateTime  @default(now())
    updated_at DateTime  @default(now())
    booking    booking[]
    payment    payment[]
}

model movie {
    id            Int             @id @default(autoincrement())
    name          String
    rating        Float           @default(1)
    description   String
    streaming     streaming[]
    duration      String
    language      String
    pg_rating     String
    trailer_url   String?
    movie_banner  String?
    created_at    DateTime        @default(now())
    updated_at    DateTime        @default(now())
    movie_picture movie_picture[]
    movie_cast    movie_cast[]
}

model movie_picture {
    id       Int    @id @default(autoincrement())
    movie_id Int
    picture  String
    movie    movie? @relation(fields: [movie_id], references: [id])
}

model movie_cast {
    movie_id Int
    actor_id Int
    movie    movie? @relation(fields: [movie_id], references: [id])
    actor    actor? @relation(fields: [actor_id], references: [id])

    @@id(fields: [movie_id, actor_id])
}

model actor {
    id         Int          @id @default(autoincrement())
    name       String
    picture    String
    movie_cast movie_cast[]
}

model cinema {
    id         Int         @id @default(autoincrement())
    name       String
    rating     Float       @default(1)
    created_at DateTime    @default(now())
    updated_at DateTime    @default(now())
    seat       seat[]
    streaming  streaming[]
}

model seat {
    primary_id    Int           @id @default(autoincrement())
    id            String
    row           String
    is_seat       Boolean
    cinema_id     Int
    seat_group_id Int?
    cinema        cinema        @relation(fields: [cinema_id], references: [id])
    seat_group    seat_group?   @relation(fields: [seat_group_id], references: [id])
    booked_seat   booked_seat[]
}

model seat_group {
    id    Int    @id @default(autoincrement())
    name  String
    price Float
    seat  seat[]
}

model streaming {
    id          Int           @id @default(autoincrement())
    movie_id    Int?
    cinema_id   Int?
    date        DateTime
    booking     booking[]
    booked_seat booked_seat[]
    movie       movie?        @relation(fields: [movie_id], references: [id])
    cinema      cinema?       @relation(fields: [cinema_id], references: [id])
}

model booking {
    id            Int           @id @default(autoincrement())
    streaming_id  Int
    customer_id   String
    status        String
    booking_token String
    payment_id    Int?
    booked_seat   booked_seat[]
    customer      customer      @relation(fields: [customer_id], references: [user_id])
    streaming     streaming     @relation(fields: [streaming_id], references: [id])
    payment       payment?      @relation(fields: [payment_id], references: [id])
    created_at    DateTime      @default(now())
    updated_at    DateTime      @default(now())
}

model booked_seat {
    id              Int        @id @default(autoincrement())
    seat_primary_id Int
    booking_id      Int
    streaming_id    Int
    booking_token   String
    seat            seat       @relation(fields: [seat_primary_id], references: [primary_id])
    booking         booking?   @relation(fields: [booking_id], references: [id])
    streaming       streaming? @relation(fields: [streaming_id], references: [id])
}

model payment {
    id                Int       @id @default(autoincrement())
    customer_id       String
    amount            Float
    stripe_session_id String
    created_at        DateTime  @default(now())
    updated_at        DateTime  @default(now())
    customer          customer  @relation(fields: [customer_id], references: [user_id])
    booking           booking[]
}
